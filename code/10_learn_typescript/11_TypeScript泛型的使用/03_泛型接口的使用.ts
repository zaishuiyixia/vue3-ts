// 泛型参数默认类型
// 在 TypeScript 2.3 以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推断出类型时，这个默认类型就会起作用。
interface IPerson<T1 = string, T2 = number> {
  name: T1
  age: T2
}

const p: IPerson = {
  name: "why",
  age: 18
}

interface A<T=string> {
  name: T;
}

const strA: A = { name: "Semlinker" };
const numB: A<number> = { name: 101 };

// 泛型参数的默认类型遵循以下规则：
// 1.有默认类型的类型参数被认为是可选的。
// 2.必选的类型参数不能在可选的类型参数后。
// 3.如果类型参数有约束，类型参数的默认类型必须满足这个约束。
// 4.当指定类型实参时，你只需要指定必选类型参数的类型实参。 未指定的类型参数会被解析为它们的默认类型。
// 5.如果指定了默认类型，且类型推断无法选择一个候选类型，那么将使用默认类型作为推断结果。
// 6.一个被现有类或接口合并的类或者接口的声明可以为现有类型参数引入默认类型。
// 7.一个被现有类或接口合并的类或者接口的声明可以引入新的类型参数，只要它指定了默认类型。


